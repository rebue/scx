<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.github.rebue.scx</groupId>
		<artifactId>scx</artifactId>
		<version>1.2.5</version>
	</parent>

	<artifactId>gateway-server</artifactId>
	<name>gateway-server</name>
	<description>Spring Cloud Gateway Server Of Rebue</description>

	<dependencies>
		<dependency>
			<groupId>com.github.rebue.scx</groupId>
			<artifactId>sgn-api</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.rebue.scx</groupId>
			<artifactId>jwt-api</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.rebue.scx</groupId>
			<artifactId>rac-api</artifactId>
		</dependency>

		<dependency>
			<groupId>com.github.rebue.scx</groupId>
			<artifactId>rrl-api</artifactId>
		</dependency>

		<dependency>
			<groupId>com.github.rebue.wheel</groupId>
			<artifactId>wheel-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.rebue.wheel</groupId>
			<artifactId>wheel-net</artifactId>
		</dependency>

		<dependency>
			<groupId>com.github.rebue.wheel</groupId>
			<artifactId>wheel-turing</artifactId>
		</dependency>

		<dependency>
			<groupId>com.github.rebue.sbs</groupId>
			<artifactId>amqp-spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>com.github.rebue.sbs</groupId>
			<artifactId>curator-spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>com.github.rebue.sbs</groupId>
			<artifactId>dubbo-spring-boot-starter</artifactId>
		</dependency>

		<!-- 监控网关 -->
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.boot</groupId> -->
		<!-- <artifactId>spring-boot-starter-actuator</artifactId> -->
		<!-- </dependency> -->

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>

		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
		</dependency>


		<!-- <dependency> -->
		<!-- <groupId>org.springframework.cloud</groupId> -->
		<!-- <artifactId>spring-cloud-starter-openfeign</artifactId> -->
		<!-- </dependency> -->

		<!-- 流量控制哨兵 -->
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-alibaba-sentinel-gateway</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba.csp</groupId>
			<artifactId>sentinel-datasource-nacos</artifactId>
		</dependency>

		<!-- 服务链路跟踪 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zipkin</artifactId>
		</dependency>

		<!-- 引入log4j2依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
		<!-- 用slf4j实现jcl -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<!-- log4j版本升级到2.14以上（不含2.14），解决log4j的安全漏洞问题 -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-jul</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>


		<dependency>
			<groupId>com.squareup.okhttp3</groupId>
			<artifactId>okhttp</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- SpringBoot服务项目打包插件，会分全包和原始包，并且会配置MANIFEST.MF文件设置运行的主类 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- 制作docker镜像的插件 -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>default</id>
						<!-- 绑定到install阶段执行 -->
						<!-- <phase>install</phase> -->
						<!-- 绑定到deploy阶段执行 -->
						<!-- <phase>deploy</phase> -->
						<!-- 不绑定到任何阶段，也就不会执行 -->
						<phase></phase>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- 此选项指定在settings.xml文件中设置的server -->
					<useMavenSettingsForAuth>true</useMavenSettingsForAuth>
					<!-- 部署到私服，${my-docker.host}在settins.xml中统一配置 -->
					<!-- <repository>${my-docker.host}/${docker.image.prefix}/${project.artifactId}</repository> -->
					<!-- 部署到hub.docker.com -->
					<repository>${docker.image.prefix}/${project.artifactId}</repository>
					<tag>${project.version}</tag>
					<buildArgs>
						<JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
					</buildArgs>
					<verbose>true</verbose>
					<googleContainerRegistryEnabled>false</googleContainerRegistryEnabled>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>